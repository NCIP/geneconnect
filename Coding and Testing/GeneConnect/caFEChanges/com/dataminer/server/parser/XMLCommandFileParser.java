/*L
 * Copyright Washington University at St. Louis
 *
 * Distributed under the OSI-approved BSD 3-Clause License.
 * See http://ncip.github.com/geneconnect/LICENSE.txt for details.
 */

/**
 *<p>ClassName: java com.dataminer.server.parser.XMLCommandFileParser</p> 
 */

package com.dataminer.server.parser;

import com.dataminer.server.ftp.FileInfo;
import com.dataminer.server.globals.Utility;
import com.dataminer.server.log.Logger;

import java.io.*;

import java.util.Vector;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/** This class parses the XML command file to extract the Information about which 
 * data sources are to be downloaded and parsed. Along with this each of the
 * command file element contains the login, password, directory, filename and
 * database type. The database type indicates to what source like UNIGENE,
 * ENTREZGENE,GO .. that file belongs
 * Th structure of XML file is: 
 * <//CommandFile>
 *		<DataSource name="" type="FTP" siteurl="" username="" password="" format="" proxyhost="" proxyport="">
 *		<ExternalParser writeToDB="yes" commandfile=" "/>
 *			<BaseDirectory dir="" islocal="" useExternalParser="">
 *				<File name="Mmu.data.gz">
 *			<//BaseDirectory>
 *		<//DataSource>
 *  <//CommandFile>
 * 
 * @author       Sachin Lale
 * @version      1.0
 */
public class XMLCommandFileParser extends CommandFileParser
{
	//private String m_commandFile;
	private Document commandFileDocument;
	/** This vector stores the fileInfo objects which are constructed by reading the 
	 * records from command file. Each of the fileInfo object will store the information
	 * read from the command file record*/
	private Vector m_files = new Vector();
	
	private static String DATABASE_ELEMENT = "DataSource";
	private static String BASEDIRECTORY_ELEMENT = "BaseDirectory";
	private static String EXTERNALPARSER_ELEMENT = "ExternalParser";
	private static String EXTERNALPARSER_ARG_ELEMENT = "Arg";
	private static String FILE_ELEMENT =  "File";
	
	
	
	/**
	 * Constructor method
	 * @param fileName Command file name to parse
	 */
	public XMLCommandFileParser(String fileName) 
	{
		super(fileName);
		commandFileDocument =getDocument(fileName);
	}
	
	/**
	 * returns the vector storing fileInfo objects which have been generated by
	 * parsing the command file
	 * @return Vector of fileInfo objects
	 */
	public Vector getFileInfo() 
	{
		return m_files;
	}
	
	/*
	 * returns DOM object storing of the XMl command file.  
	 */
	private Document getDocument(String FileName)
	{
		Document doc =null;
		try
		{
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			doc = builder.parse(FileName);
		}
		catch(Exception e)
		{
			System.out.println(e);
			printError(e.getMessage());
			System.exit(1);
		}
		return doc;
	}
	/** 
	 * Reads the information about databases/files to download from
	 * the command file
	 * @exception FileNotFoundException throws error if command file is not found
	 * @exception IOException Throws exception if error while reading command fiel
	 */
	public void readCmdFile() throws FileNotFoundException, IOException 
	{
		/**start reading the command file*/
		Node rootNode = (Node)commandFileDocument.getDocumentElement();
		NodeList childNodes = rootNode.getChildNodes();
		for(int i=0;i<childNodes.getLength();i++)
		{
			Node node = childNodes.item(i);
			
			/** get <Database> element from DOM tree of XML command file **/
			
			if(node.getNodeName().equalsIgnoreCase(DATABASE_ELEMENT))
			{
				getFileInfo(node);
				Logger.log("no of files from cmd file " + m_files.size(),Logger.INFO);
				//System.out.println("1");
				//m_files.addElement(downloadInfo);
			}
		}
	}
	
	private void getFileInfo(Node dbNode)
	{
		/** download info for storing information about each site*/
		FileInfo fileInfo = new FileInfo();
		
		/** Temperory variables used to store information read from command file*/
		String url = null, user = null, pwd = null, db = null,format=null;
		String base = null, file = null;
		String type = null;
		boolean proxy = false;
		boolean islocalfile = false;
		String proxyHost = null;
		String proxyPort = null;
		Vector externalParserArg = new Vector();
		boolean externalParser=false,writeToDB=false;
		String externalParserCommanFile=null;
	
	
		try
		{
			/** get Database attributes of <Database> element **/
			NamedNodeMap nodeMap = dbNode.getAttributes();
			for(int i=0;i<nodeMap.getLength();i++)
			{
				Attr attr  = (Attr)nodeMap.item(i);
				if(attr.getNodeName().equalsIgnoreCase("name"))
				{
					if(attr.getNodeValue()!=null)
						db =attr.getNodeValue();
				}
				
				if(attr.getNodeName().equalsIgnoreCase("type"))
				{
					if(attr.getNodeValue()!=null)
						type =attr.getNodeValue();
				}
				if(attr.getNodeName().equalsIgnoreCase("siteurl"))
				{
					if(attr.getNodeValue()!=null)
						url =attr.getNodeValue();
				}
				if(attr.getNodeName().equalsIgnoreCase("username"))
				{
					if(attr.getNodeValue()!=null)
						user =attr.getNodeValue();
				}
				if(attr.getNodeName().equalsIgnoreCase("password"))
				{
					if(attr.getNodeValue()!=null)
						pwd =attr.getNodeValue();
				}
				if(attr.getNodeName().equalsIgnoreCase("format"))
				{
					if(attr.getNodeValue()!=null)
						format =attr.getNodeValue();
				}
				if(attr.getNodeName().equalsIgnoreCase("proxyhost"))
				{
					if(attr.getNodeValue()!=null)
					{
						proxy=true;
						proxyHost =attr.getNodeValue();
					}
				}
				if(attr.getNodeName().equalsIgnoreCase("proxyport"))
				{
					if(attr.getNodeValue()!=null)
						proxyPort =attr.getNodeValue();
				}
				
			}
			
			NodeList dbChildNodes = dbNode.getChildNodes();
			for(int i=0;i<dbChildNodes.getLength();i++)
			{
				
				Node node = dbChildNodes.item(i);

				/** get  attributes of <ExternalParser> element 
				 * <ExternalParser writeToDB=" " commandfile=" ">
				 * 	<Arg name=" " valeu="" />
				 * </ExternalParser
				 * **/
				if(node.getNodeName().equalsIgnoreCase(EXTERNALPARSER_ELEMENT))
				{
					
					NodeList argNodeList = node.getChildNodes();
					for(int j=0;j<argNodeList.getLength();j++)
					{
						Node argNode = argNodeList.item(j);
						if(argNode.getNodeName().equalsIgnoreCase(EXTERNALPARSER_ARG_ELEMENT))
						{
							NamedNodeMap tempMap = argNode.getAttributes();
							Attr attr = null;
							/**Get Argument Name*/
							attr = (Attr)tempMap.item(0);
							String args = null;
							if(attr.getNodeValue()!=null)
							{
								args=attr.getNodeValue()+"=";
								
							}
							/**Get Argument Value*/
							attr = (Attr)tempMap.item(1);
							if(attr.getNodeValue()!=null)
							{
								
								args=args.concat(attr.getNodeValue());
								//System.out.println("file: "+file );
								externalParserArg.add(args.toString());
							}
						}
					}	
					NamedNodeMap namedNodeMap = node.getAttributes();
					for(int j=0;j<namedNodeMap.getLength();j++)
					{
						externalParser=true;
						Attr attr  = (Attr)namedNodeMap.item(j);
						//System.out.println("1: "+attr.getNodeValue()+attr.getNodeName());
						/** Get writeToDB attribute of <ExternalParser> element 
						 *  denotes whether the externla parser will write data directly to DB
						 * */
						if(attr.getNodeName().equalsIgnoreCase("writeToDB"))
						{
							//System.out.println("a"+attr.getNodeValue()+attr.getNodeName());
							if(attr.getNodeValue()!=null)
							{
								writeToDB=Utility.toBoolean(attr.getNodeValue());
							}	
						}
						/** Get commandfile attribute of <ExternalParser> element. 
						 *  commandfile attributes contains external parser's command to be execute. 
						 * */
						if(attr.getNodeName().equalsIgnoreCase("commandfile"))
						{
							//System.out.println("a"+attr.getNodeValue()+attr.getNodeName());
							if(attr.getNodeValue()!=null)
							{
								externalParserCommanFile = attr.getNodeValue();
							}	
						}
					}	
				}
				/** Store information in temporary variables read from XML command file.
				 * Get Base Directory attributes of <BaseDirectory> element
				 * For each BaseDirecory element create new FileInfo 
				 **/
				if(node.getNodeName().equalsIgnoreCase(BASEDIRECTORY_ELEMENT))
				{
					fileInfo = new FileInfo();
					fileInfo.addDatabaseType(db);
					fileInfo.setType(type);
					fileInfo.addSite(url);
					fileInfo.addUser(user);
					fileInfo.addPasswd(pwd);
					fileInfo.addInputFormat(format);
					fileInfo.setProxy(proxy);
					fileInfo.setProxyHost(proxyHost);
					fileInfo.setProxyPort(proxyPort);
					
					fileInfo.setIsExternalParser(externalParser);
					fileInfo.setIsWriteToDB(writeToDB);
					fileInfo.setExternalParserCommanFile(externalParserCommanFile);
					
					for(int k=0;k<externalParserArg.size();k++)
					{
						fileInfo.addExternalParserArg((String)externalParserArg.get(k));
					}
					
					NamedNodeMap namedNodeMap = node.getAttributes();
					for(int j=0;j<namedNodeMap.getLength();j++)
					{
						Attr attr  = (Attr)namedNodeMap.item(j);
						//System.out.println("1: "+attr.getNodeValue()+attr.getNodeName());
						/** Get dir attribute of <BaseDirectory> element **/
						if(attr.getNodeName().equalsIgnoreCase("dir"))
						{
							//System.out.println("a"+attr.getNodeValue()+attr.getNodeName());
							if(attr.getNodeValue()!=null)
							{
								base=attr.getNodeValue();
								fileInfo.addBaseDir(base);
							}	
						}
						
						/** Get islocal attribute of <BaseDirectory> element. 
						 *  islocal attributes denotes the file is a local file. 
						 * **/
						if(attr.getNodeName().equalsIgnoreCase("islocal"))
						{
							if(attr.getNodeValue()!=null)
							{
								islocalfile =Utility.toBoolean(attr.getNodeValue());
							//	System.out.println("1"+islocalfile);
								fileInfo.localFile=islocalfile;
							}	
						}
					}
					NodeList fileNodeList = node.getChildNodes();
					for(int j=0;j<fileNodeList.getLength();j++)
					{
						Node fileNode = fileNodeList.item(j);
						/** Get File name attribute of <BaseDirectory> element. 
						 *  File name attributes specifies the file to be download / parse. 
						 * **/
						if(fileNode.getNodeName().equalsIgnoreCase(FILE_ELEMENT))
						{
							NamedNodeMap tempMap = fileNode.getAttributes();
							Attr attr  = (Attr)tempMap.item(0);
							if(attr.getNodeValue()!=null)
							{
								file = attr.getNodeValue();
								//System.out.println("file: "+file );
								fileInfo.addFile(file);
							}	
						}
					}
					// Add FileInfo object in a vector
					if (true == fileInfo.checkRecord())
					{
						m_files.addElement(fileInfo);	
					}
					else
					{
						System.out.println("Error: In FIle Info " + fileInfo.getDatabaseType());
					}
				}
			}
		}
		catch(Exception e)
		{
			System.out.println(e);
			printError(e.getMessage());
			System.exit(1);
		}
	}
	/**
	 * Print error message into a log file
	 * @param s String to print
	 */
	public void printError(String s) 
	{
		Logger.log("Error: " + s,Logger.WARNING);
	}
	
	/**
	 * Main method
	 * @param arg
	 */
	static public void main(String arg[])
	{
		try
		{
			XMLCommandFileParser cmd = new XMLCommandFileParser("D:/Eclipse/workspace/caFEServer/Config/CommandFile.xml");
			cmd.readCmdFile();
			Vector vect= cmd.getFileInfo();
			for(int i = 0;i<vect.size();i++)
			{
				FileInfo fi= (FileInfo)vect.get(i);
				System.out.println("db: "+fi.getDatabaseType()+"----"+i);
				System.out.println("url: "+fi.getSite());
				System.out.println("user: "+fi.getUser());
				System.out.println("pwd: "+fi.getPasswd());
				System.out.println("proxyH: "+fi.getProxyHost());
				System.out.println("prox=Yp: "+fi.getProxyPort());
				System.out.println("form: "+fi.getInputFormat());
				System.out.println("isExter: " + fi.IsExternalParser());
				System.out.println("writedb: " + fi.IsWriteToDB());
				System.out.println("Cmdfile: " + fi.getExternalParserCommanFile());
				Vector args = fi.getExternalParserArg();
				for(int j = 0;j<args.size();j++)
				{
					System.out.println("Args "+args.get(j));
				}
				Vector temp = fi.getFiles();
				System.out.println("File"+temp);
				for(int j = 0;j<temp.size();j++)
				{
					System.out.println("File"+temp.get(j));
				}
			}
		}
		catch(Exception e)
		{
			
		}
	}
}
