<?xml version ="1.0"?>

<!--Ant Script for GeneConnectServer-->

<project name="GeneConnectServer" default="buildjar">

	<!--define require dir and Properties -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="./Lib/ant-contrib.jar"/>
		</classpath>
	</taskdef>

	<!--define require dir and Properties -->
	<property name="base.dir" value="."/>
	<property name="src.dir" value="${base.dir}/src"/>
	<property name="fesrc.dir" value="${base.dir}/caFEChanges"/>
	<property name="output.dir" value="${base.dir}/bin"/>
	<property name="lib.dir" value="${base.dir}/Lib"/>
	<property name="build.dir" value="${base.dir}/Lib"/>
	<property name="logs.dir" value="${base.dir}/Logs"/>

	<property file="${base.dir}/Config/server.properties"/>
	<property file="${base.dir}/build.properties"/>


	<!-- Clean ups all temporary and log files -->
	<target name="clean">
		<echo message="Deleting all temporary files in the output folder..." />
		<delete includeemptydirs="true">
			<fileset dir="${output.dir}">
				<include name="**/*" />
			</fileset>
		</delete>

		<echo message="Deleting all log files in the Logs folder..." />
		<delete includeemptydirs="true">
			<fileset dir="${logs.dir}">
				<include name="**/*" />
			</fileset>
		</delete>
	</target>

	<!-- Intizalization tasks-->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${output.dir}"/>
		<mkdir dir="${output.dir}/classes"/>
		<mkdir dir="${output.dir}/jar"/>
		<!-- Extract existing FE server jar in the output folder -->
		<unjar src="${base.dir}/FEServer.jar" dest="${output.dir}/classes"/>
	</target>


	<!-- Compile all files, generated and hand-written -->
	<target name="compile" depends="init">
		<javac srcdir="${src.dir}:${fesrc.dir}" destdir="${output.dir}/classes" fork="true" includes="**/*.*" >
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>


	<!-- Create the application JAR -->
	<target name="buildjar" depends="compile" >
		<jar taskname="buildJar" jarfile="${output.dir}/jar/GeneConnectServer.jar">
			<fileset dir="${output.dir}/classes" includes="**/*"/>
		</jar>
		<copy file="${output.dir}/jar/GeneConnectServer.jar" todir="${lib.dir}"/>
	</target>
	<!-- Cretes Log folder-->
	<target name="createLogfolder" >
		<mkdir dir="${base.dir}/Logs"/>
	</target>
	<!-- Deploys the application -->
	<!-- 1. Checks config file parameters -->
	<!-- 2. Replace config params in run scripts -->
	<!-- 3. Creates table space and user -->
	<!-- 4. Creates database schema -->
	<target name="deploy" depends="createLogfolder,checkConfigFiles,replaceConfigParameters,
		createDataBaseSpaceAndUser,createTables,copyRunScripts,calculateMetaData,SendMail">
		<echo message="Deploying GeneConnect Server..."/>
	</target>



	<!-- Checks server.properties and build.properties files for mandatory and correct property values -->
	<!-- More checks needs to be added over here-->
	<target name="checkConfigFiles">
		<echo message="Checking server.properties and build.properties files for mandatory and correct
			property values..."/>
		<if>
			<or>
				<equals arg1="oracle" arg2="${databaseType}"/>
				<equals arg1="Oracle" arg2="${databaseType}"/>
			</or>
			<then/>
			<else>
				<fail message="The value of property 'database.type' in 'server.properties' should be Oracle."/>
			</else>
		</if>

		<if>
			<equals arg1="" arg2="${databaseLogin}}"/>
			<then>
				<fail message="The property 'databaseLogin' in 'server.properties' should not be empty."/>
			</then>
		</if>

		<if>
			<equals arg1="" arg2="${databaseAdminLogin}}"/>
			<then>
				<fail message="The property 'databaseAdminLogin' in 'server.properties' should not be empty"/>
			</then>
		</if>

		<if>
			<equals arg1="" arg2="${databaseConnect}"/>
			<then>
				<fail message="The property 'databaseConnect' in 'server.properties' should not be empty"/>
			</then>
		</if>

		<if>
			<equals arg1="" arg2="${databaseURL}}"/>
			<then>
				<fail message="The property 'databaseURL' in 'server.properties' should not be empty"/>
			</then>
		</if>

		<if>
			<equals arg1="" arg2="${driverName}"/>
			<then>
				<fail message="The property 'driverName' in 'server.properties' should not be empty"/>
			</then>
		</if>

		<if>
			<equals arg1="" arg2="${commandFileName}"/>
			<then>
				<fail message="The property 'commandFileName' in 'server.properties' should not be empty"/>
			</then>
		</if>

		<if>
			<equals arg1="" arg2="${GC_HOME}"/>
			<then>
				<fail message="The property 'GC_HOME' in 'build.properties' should not be empty"/>
			</then>
		</if>

		<if>
			<equals arg1="" arg2="${JAVA_HOME}}"/>
			<then>
				<fail message="The property 'JAVA_HOME' in 'build.properties' should not be empty"/>
			</then>
		</if>

		<if>
			<equals arg1="" arg2="${ORACLE_HOME}"/>
			<then>
				<fail message="The property 'ORACLE_HOME' in 'build.properties' should not be empty"/>
			</then>
		</if>

		<if>
			<equals arg1="" arg2="${PERL_HOME}"/>
			<then>
				<fail message="The property 'PERL_HOME' in 'build.properties' should not be empty"/>
			</then>
		</if>

		<if>
			<equals arg1="" arg2="${BLAST_HOME}"/>
			<then>
				<fail message="The property 'BLAST_HOME' in 'build.properties' should not be empty"/>
			</then>
		</if>
	</target>


	<!-- Replaces configuration parameters such as JAVA_HOME, ORACLE_HOME, etc. in run scripts. 
	The user will specify all such configuration parameters in single property file (build.properties) 
	and this task will copy them to appropriate run scripts.-->

	<target name="replaceConfigParameters" depends="checkConfigFiles">
		<echo message="Updating run scripts with config parameters..."/>

		<fileset id="UpdateWindows.bat" dir="${base.dir}/RunScripts/Windows">
			<include name="UpdateWindows.bat" />
		</fileset>
		<fileset id="UpdateLinux.sh" dir="${base.dir}/RunScripts/Linux">
			<include name="UpdateLinux.sh" />
		</fileset>
		<fileset id="UpdateSolaris.sh" dir="${base.dir}/RunScripts/Solaris">
			<include name="UpdateSolaris.sh" />
		</fileset>
		<fileset id="ParserScripts" dir="${base.dir}/ParserScripts">
			<include name="UnigeneParser.sh" />
			<include name="UnigeneParser.bat" />
		</fileset>

		<replaceregexp match="GC_HOME=(.*)" replace="GC_HOME=${GC_HOME}" byline="true">
					<fileset refid="UpdateWindows.bat"/>
					<fileset refid="UpdateLinux.sh"/>
					<fileset refid="UpdateSolaris.sh"/>
					<fileset refid="ParserScripts"/>
				</replaceregexp>
		<replaceregexp match="JAVA_HOME=(.*)" replace="JAVA_HOME=${JAVA_HOME}" byline="true">
			<fileset refid="UpdateWindows.bat"/>
			<fileset refid="UpdateLinux.sh"/>
			<fileset refid="UpdateSolaris.sh"/>
			<fileset refid="ParserScripts"/>
		</replaceregexp>

		<replaceregexp match="ORACLE_HOME=(.*)" replace="ORACLE_HOME=${ORACLE_HOME}" byline="true">
			<fileset refid="UpdateWindows.bat"/>
			<fileset refid="UpdateLinux.sh"/>
			<fileset refid="UpdateSolaris.sh"/>
			<fileset refid="ParserScripts"/>
		</replaceregexp>

		<replaceregexp match="PERL_HOME=(.*)" replace="PERL_HOME=${PERL_HOME}" byline="true">
			<fileset refid="UpdateWindows.bat"/>
			<fileset refid="UpdateLinux.sh"/>
			<fileset refid="UpdateSolaris.sh"/>
			<fileset refid="ParserScripts"/>
		</replaceregexp>

		<replaceregexp match="BLAST_HOME=(.*)" replace="BLAST_HOME=${BLAST_HOME}" byline="true">
			<fileset refid="UpdateWindows.bat"/>
			<fileset refid="UpdateLinux.sh"/>
			<fileset refid="UpdateSolaris.sh"/>
			<fileset refid="ParserScripts"/>
		</replaceregexp>
	</target>


	<!-- Create a database schema and user -->
	<!-- Confirm Admin user name and password in the server.properties before running the target-->
	<!-- Also check the table space name, table space file name, user name and passwords 
	in the script "GCOracleInit.sql" -->
	<target name="createDataBaseSpaceAndUser">
		<echo message="Creating database table space and user..."/>
		<sql driver="${driverName}"
			url="${databaseURL}"
			userid="${databaseAdminLogin}" 
			password="${databaseAdminPassword}" 
			onerror="continue">
			<classpath>
				<pathelement path="${ORACLE_HOME}/jdbc/lib/classes12.zip"/>
			</classpath>
			<transaction  src="${ORACLE_HOME}/rdbms/admin/catldr.sql"/>
			<transaction  src="${base.dir}/RunScripts/GCOracleInit.sql"/>
		</sql>
	</target>

	<!-- Create a database tables -->
	<!-- Confirm database user name and password in the server.properties before running the target-->
	<target name="createTables">
		<echo message="Creating GeneConnect database tables..."/>
		<sql driver="${driverName}"
	       	url="${databaseURL}"
	       	userid="${databaseLogin}" 
			password="${databasePassword}" 
			onerror="continue">
			<classpath>
				<pathelement path="${ORACLE_HOME}/jdbc/lib/classes12.zip"/>
			</classpath>
			<transaction  src="${base.dir}/Scripts/GCSchemaCreation.sql"/>
			<transaction  src="${base.dir}/Scripts/GCSchemaCreation_U.sql"/>
			<transaction  src="${base.dir}/Scripts/GCMetadataSchemaCreation.sql"/>
		</sql>
	</target>

	<!-- Copies all run scripts (as per the OS) to the GeneConnect base directory-->
	<target name="copyRunScripts" depends="replaceConfigParameters">
		<echo message="Copying all run scripts (for the OS : ${os.name}) to the GeneConnect base directory..."/>
		<if>
			<equals arg1="${os.name}" arg2="Linux"/>
			<then>
				<!-- Linux OS -->
				<antcall target="copyRunScriptsForLinux"/>
			</then>
			<else>
				<if>
					<or>
						<equals arg1="${os.name}" arg2="Windows 2000" />
						<equals arg1="${os.name}" arg2="Windows XP" />
					</or>
					<then>
						<!-- Windows OS -->
						<antcall target="copyRunScriptsForWindows"/>
					</then>
					<else>
						<if>
							<or>
								<equals arg1="${os.name}" arg2="Solaris" />
								<equals arg1="${os.name}" arg2="SunOS" />
							</or>
							<then>
								<!-- Solaris OS -->
								<antcall target="copyRunScriptsForSolaris" />
							</then>
							<else>
								<fail message="Run scripts are available only for Windows, Linux and Solaris"/>
							</else>
						</if>
					</else>
				</if>
			</else>
		</if>
	</target>

	<target name="copyRunScriptsForLinux">
		<chmod file="${base.dir}/RunScripts/Linux/UpdateLinux.sh" perm="u+x"/>
		<copy file="${base.dir}/RunScripts/Linux/UpdateLinux.sh" todir="${base.dir}"/>
		<copy file="${base.dir}/RunScripts/Linux/gene2xml" todir="${base.dir}"/>
		<chmod perm="777" type="file">
		  <fileset dir="${base.dir}">
		    <include name="**/*.sh"/>
		  </fileset>
		  <fileset dir="${base.dir}/ParserScripts">
		    <include name="**/*.sh"/>
		  </fileset>
 		  <fileset dir="${base.dir}/Lib">
		    <include name="**/*.*"/>
		  </fileset>
		</chmod>
	</target>

	<target name="copyRunScriptsForWindows">
		<copy file="${base.dir}/RunScripts/Windows/UpdateWindows.bat" todir="${base.dir}"/>
		<copy file="${base.dir}/RunScripts/Windows/gene2xml.exe" todir="${base.dir}"/>
	</target>

	<target name="copyRunScriptsForSolaris">
		<chmod file="${base.dir}/RunScripts/Solaris/UpdateSolaris.sh" perm="u+x"/>
		<copy file="${base.dir}/RunScripts/Solaris/UpdateSolaris.sh" todir="${base.dir}"/>
		<copy file="${base.dir}/RunScripts/Solaris/gene2xml" todir="${base.dir}"/>
		<chmod perm="777" type="file">
			<fileset dir="${base.dir}">
				<include name="**/*.sh"/>
			</fileset>
			<fileset dir="${base.dir}/ParserScripts">
				<include name="**/*.sh"/>
		    </fileset>
			<fileset dir="${base.dir}/Lib">
				<include name="**/*.*"/>
			</fileset>
		</chmod>
	</target>
	<!-- END OF copyRunScripts-->


	<!-- START OF RUN SCRIPTS -->
	<target name="run" depends="copyRunScripts">
		<echo message="Running GeneConnect Server..."/>
		<if>
			<equals arg1="${os.name}" arg2="Linux" />
			<then>
				<!-- Linux OS -->
				<antcall target="runForLinux" />
			</then>
			<else>
				<if>
					<or>
						<equals arg1="${os.name}" arg2="Windows 2000" />
						<equals arg1="${os.name}" arg2="Windows XP" />
					</or>
					<then>
						<!-- Windows OS -->
						<antcall target="runForWindows" />
					</then>
					<else>
						<if>
							<or>
								<equals arg1="${os.name}" arg2="Solaris" />
								<equals arg1="${os.name}" arg2="SunOS" />
							</or>
							<then>
								<!-- Solaris OS -->
								<antcall target="runForSolaris" />
							</then>
							<else>
								<fail message="Run scripts are available only for Windows, Linux and Solaris" />
							</else>
						</if>
					</else>
				</if>
			</else>
		</if>
	</target>

	<target name="runForLinux">
		<exec executable="./UpdateLinux.sh">
		</exec>
	</target>

	<target name="runForWindows">
		<exec executable="UpdateWindows.bat">
		</exec>
	</target>

	<target name="runForSolaris">
		<exec executable="./UpdateSolaris.sh">
		</exec>
	</target>
	<!-- END of Run Scripts-->


	<!-- Executes MetaData Calculator -->
	<target name="calculateMetaData">
		<!-- Run MetadataCalculator program first -->
		<java classname="edu.wustl.geneconnect.metadata.MetadataCalculator" fork="true">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${ORACLE_HOME}/jdbc/lib">
					<include name="classes12.zip" />
				</fileset>
			</classpath>
		</java>

		<!-- Run script-->
		<echo message="Populating GeneConnect metadata tables..." />
		<sql driver="${driverName}" url="${databaseURL}" userid="${databaseLogin}" password="${databasePassword}" onerror="continue">
			<classpath>
				<pathelement path="${ORACLE_HOME}/jdbc/lib/classes12.zip" />
			</classpath>
			<transaction src="${base.dir}/Scripts/GCMetadataPopulation.sql" />
		</sql>
	</target>

	<!-- End of calculateMetaData -->

	<!-- Executes SummaryCalculator -->
	<target name="calculateSummary">
		<!-- Run Summary Calculator program first -->
		<java classname="edu.wustl.geneconnect.postwork.SummaryCalculator" fork="true" maxmemory="1800m">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${ORACLE_HOME}/jdbc/lib">
					<include name="classes12.zip" />
				</fileset>
			</classpath>
		</java>
	</target>
	<!-- End of SummaryCalculator -->

	<!--Sends the mail for successful deployment of GeneConnect Server.-->
	<target name="SendMail">
		<echo message="Sending mail to: ${toAddress}" />
		<echo message="Sending mail from: ${fromAddress}" />
		<mail mailhost="${host}" subject="GeneConnect Successfully Deployed"  
			user="${fromAddress}" password="${mailAccountpassword}" failonerror="false">
			<from address="${fromAddress}" />
			<to address="${toAddress}" />
			<message>
				Dear GeneConnect Administrator,
					
					This is to validate that GeneConnect Server has been installed successfully.
				
				Thanking You,
				-GeneConnect Team.				
				</message>
		</mail>
		<echo>
				Please check the Email of ${toAddress}.
				If the Deployment mail is not received please check your 
				email related parameters in server.properties.
		</echo>
	</target>


	<!-- ================================= 
          target: GetLatestAndDeply              
         ================================= -->
	<target name="GetLatestAndDeply" depends="updateCVS,copyUpdatedCVSContents,deploy" description="Updates the repository 
    	from CVS and deploys the application">
	</target>

	<!-- ================================= 
          target: GetLatestAndBuildJar              
         ================================= -->
	<target name="GetLatestAndBuildJar" depends="updateCVS,copyUpdatedCVSContents,buildjar" description="Updates the repository 
    	from CVS and builds the application jar">
	</target>

	<!-- Updates the CVS contents and copies the updated contents into the server repository -->
	<target name="updateCVS">
		<if>
			<equals arg1="${CVS_CHECKOUT}" arg2="true"/>
			<then>
				<cvs failonerror="true" command="checkout" cvsroot="${CVS_ROOT}" package="${CVS_PACKAGE}" dest="${CVS_LOCATION}" />
			</then>
			<else>
				<cvs failonerror="true" command="update" cvsroot="${CVS_ROOT}" package="${CVS_PACKAGE}" dest="${CVS_LOCATION}" />
			</else>
		</if>

	</target>


	<!-- ================================= 
          target: copyUpdatedCVSContents              
         ================================= -->
	<target name="copyUpdatedCVSContents" description="Copies updated contents from the CVS to the
    	current repository">
		<copy overwrite="true" todir="${base.dir}">
			<fileset dir="${CVS_LOCATION}${CVS_MODULE_LOCATION}"/>
		</copy>
	</target>

</project>