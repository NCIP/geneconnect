<?xml version ="1.0"?>
<!--Ant Script for create Build for caTISSUE Core-->

<project name="GeneConnectWeb Application build script" default="build_war">
	
	<!--define require dir and Properties -->	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	<classpath>
	    <pathelement location="./lib/ant-contrib.jar"/>
	  </classpath>
	</taskdef>

	<property file="build.properties"/>
	
	<property name="base.dir" value="."/>
	<property name="web.dir" value="."/>
	<property name="websrc.dir" value="${base.dir}/WEB-INF/src"/>
	<property name="temp.dir" value="./temp"/>
	<property name="app.temp.dir" value="./temp/geneconnect" />
	<property name="app.cacore.temp.dir" value="./temp/geneconnectcaCore" />
	<property name="lib.dir" value="${base.dir}/WEB-INF/lib"/>
	<property name="output.dir" value="${base.dir}/bin"/>
	
	<property name="app.war.name" value="geneconnect.war"/>
	<property name="app.cacore.war.name" value="geneconnectcaCore.war"/>
		
    <property name="mysql.sql.dir" value="${base.dir}/SQL/MySql"/>
	<property name="oracle.sql.dir" value="${base.dir}/SQL/Oracle"/>
	<property name="common.sql.dir" value="${base.dir}/SQL/Common"/>
	<property name="oracle.dialect.string" value="net.sf.hibernate.dialect.Oracle9Dialect"/>
	<property name="mysql.dialect.string" value="net.sf.hibernate.dialect.MySQLDialect"/>
	
	<property name="oracle.dialect.h3.string" value="org.hibernate.dialect.Oracle9Dialect"/>
	<property name="mysql.dialect.h3.string" value="org.hibernate.dialect.MySQLDialect"/>
	
	<property name="oracle.driver.string" value="oracle.jdbc.driver.OracleDriver"/>
	<property name="mysql.driver.string" value="org.gjt.mm.mysql.Driver"/>
	
	<property name="mysql.lib" value="mysql-connector-java-3.0.16-ga-bin.jar"/>
	<property name="oracle.lib" value="oracleDriver.jar"/>
	
	<!-- Check for required properties -->
	
	<!-- Clean ups all temporary and log files -->
		<target name="clean">
			<echo message="Deleting all temporary files in the output folder..." />
			<delete includeemptydirs="true">
				<fileset dir="${output.dir}">
					<include name="**/*" />
				</fileset>
			</delete>
		</target>

		<!-- Intizalization tasks-->
		<target name="init">
			<!-- Create the time stamp -->
			<tstamp/>
			<!-- Create the build directory structure used by compile -->
			<mkdir dir="${output.dir}"/>
			<mkdir dir="${output.dir}/classes"/>
			<mkdir dir="${output.dir}/classes/jar"/>
			<mkdir dir="${output.dir}/classes/war"/>
			<mkdir dir="${output.dir}/jar"/>
			<mkdir dir="${output.dir}/war"/>
			<!-- Extract existing FE server jar in the output folder -->
			<!--unjar src="${lib.dir}/FEServer.jar" dest="${output.dir}/classes/jar"/-->
		</target>

	<!-- Compile all files, generated and hand-written -->
		<target name="compile" depends="init">
			<javac srcdir="${websrc.dir}" destdir="${output.dir}/classes/war" fork="true" includes="**/*.*" includeAntRuntime="true">
				<classpath>
					<fileset dir="${lib.dir}">
						<include name="**/*.jar" />
					</fileset>
					<fileset dir="${web.dir}/WEB-INF/lib">
						<include name="**/*.jar" />
					</fileset>
					<fileset dir="${base.dir}/graph">
						<include name="**/*.jar" />
					</fileset>
				</classpath>
			</javac>
		</target>
	<!-- Creates the WAR (Web Application Archive) file of the application -->
		<target name="build_war" depends="compile">
			<delete file="${output.dir}/war/geneconnect.war"/>
			<copy file="${web.dir}/WEB-INF/src/GCBusinessLogic.xml" todir="${output.dir}/classes/war"/>
			<copy file="${web.dir}/WEB-INF/src/ApplicationResources.properties" todir="${output.dir}/classes/war"/>
			<war destfile="geneconnect.war" webxml="${web.dir}/WEB-INF/web.xml">
				<classes dir="${output.dir}/classes/war">
				</classes>
				<lib dir="${web.dir}/WEB-INF/lib">
				</lib>
				<webinf dir="${web.dir}/WEB-INF">
					<exclude name="classes/**" />
					<exclude name="src/**" />
					<exclude name="GeneConnect_caCore_Client/**" />
					<exclude name="geneconnectcaCore.war" />
					<exclude name="geneconnect.war" />
				</webinf>
				<fileset dir="${web.dir}">
					<include name="css/**"/>
					<include name="images/**"/>
					<include name="scripts/**"/>
					<include name="pages/**"/>
					<include name="extra_lib/**"/>
					<include name="jss/**"/>
					<include name="runtime/**"/>
					<include name="graph/**"/>
					<include name="dhtml_comp/**"/>
				</fileset>
			</war>
			<copy file="geneconnect.war" todir="${output.dir}/war"/>
		</target>

	<!--NOTE: first get ApplicationResource.properties and geneconnectcaCore.war from cvs-->
	<target name="create_releasezip">
		<antcall target="build_war" />
		<property name="zip.dir" value="${base.dir}/GeneConnect_Web_Installable" />
		<property name="zip.file" value="${base.dir}/GeneConnect_Web_Installable.zip" />
		<delete file="${zip.file}" />
		<delete dir="${zip.dir}" />
		<mkdir dir="${zip.dir}" />
		
		<copy file="${app.war.name}" todir="${zip.dir}" overwrite="true" />
		<copy file="${app.cacore.war.name}" todir="${zip.dir}" overwrite="true" />
		<copy file="GeneConnectInstall.properties" todir="${zip.dir}" overwrite="true" />
		<copy file="deploy.xml" todir="${zip.dir}" overwrite="true" />
		<copy todir="${zip.dir}/GeneConnect_caCore_Client" overwrite="true">
			<fileset dir="${base.dir}/GeneConnect_caCore_Client" />
		</copy>
		<copy todir="${zip.dir}/lib" overwrite="true">
			<fileset dir="${base.dir}/lib" />
		</copy>
		<zip destfile="${zip.file}" basedir="${zip.dir}" />
		<delete dir="${zip.dir}" />
		<copy file="${zip.file}" todir="${web.dir}/Release" />
	</target>

		
	<target name="getLatestCodeFromCVS" depends="updateCVS,copyUpdatedCVSContents" description="Updates the repository 
	    	from CVS and deploys the application">
	</target>

	<!-- Updates the CVS contents and copies the updated contents into the server repository -->
	<target name="updateCVS">
		<if>
			<equals arg1="${CVS_CHECKOUT}" arg2="true"/>
			<then>
				<cvs failonerror="true" command="checkout" cvsroot="${CVS_ROOT}" package="${CVS_PACKAGE}" dest="${CVS_LOCATION}" />
			</then>
			<else>
				<cvs failonerror="true" command="update" cvsroot="${CVS_ROOT}" package="${CVS_PACKAGE}" dest="${CVS_LOCATION}" />
			</else>
		</if>

	</target>


	<!-- ================================= 
          target: copyUpdatedCVSContents              
         ================================= -->
	<target name="copyUpdatedCVSContents" description="Copies updated contents from the CVS to the
    	current repository">
		<copy overwrite="true" todir="${base.dir}">
			<fileset dir="${CVS_LOCATION}${CVS_MODULE_LOCATION}"/>
		</copy>
	</target>
</project>